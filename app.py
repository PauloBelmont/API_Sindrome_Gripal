import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from datetime import datetime
import gdown
import os
import joblib
import numpy as np
from sklearn.preprocessing import StandardScaler

if not os.path.exists("melhor_modelo.pkl"):
    url = "https://drive.google.com/uc?id=1JWglKM4BJxkxH5Yc2HLxcOG_gWgCUFsN"
    gdown.download(url, "melhor_modelo.pkl", quiet=False)

# ConfiguraÃ§Ã£o da pÃ¡gina
st.set_page_config(page_title="Dashboard COVID-19", page_icon="ğŸ¦ ", layout="wide")

# TÃ­tulo do dashboard
st.title("AnÃ¡lise de Casos de COVID-19 e SÃ­ndromes Gripais")
st.markdown("Dashboard interativo para anÃ¡lise de casos de COVID-19 e sÃ­ndromes gripais")

# Carregar os dados
@st.cache_data
def load_data():
    return pd.read_csv("df_preprocessed_new.csv")

df = load_data()

# Converter datas
date_cols = ['dataNotificacao', 'dataInicioSintomas', 'dataEncerramento']
for col in date_cols:
    df[col] = pd.to_datetime(df[col], errors='coerce')

# Sidebar com filtros
st.sidebar.header("Filtros")
with st.sidebar:
    # Filtro por classificaÃ§Ã£o
    classificacoes = st.multiselect(
        "ClassificaÃ§Ã£o",
        options=df['classificacaoFinal'].unique(),
        default=df['classificacaoFinal'].unique()
    )
    
    # Filtro por evoluÃ§Ã£o
    evolucoes = st.multiselect(
        "EvoluÃ§Ã£o do Caso",
        options=df['evolucaoCaso'].unique(),
        default=df['evolucaoCaso'].unique()
    )
    
    # Filtro por idade
    idade_min, idade_max = st.slider(
        "Faixa EtÃ¡ria",
        min_value=int(df['idade'].min()),
        max_value=int(df['idade'].max()),
        value=(int(df['idade'].min()), int(df['idade'].max()))
    )

# Aplicar filtros
df_filtrado = df[
    (df['classificacaoFinal'].isin(classificacoes)) &
    (df['evolucaoCaso'].isin(evolucoes)) &
    (df['idade'] >= idade_min) &
    (df['idade'] <= idade_max)
]

# Layout do dashboard
tab1, tab2, tab3, tab4, tab5 = st.tabs([
    "VisÃ£o Geral", 
    "DistribuiÃ§Ã£o DemogrÃ¡fica", 
    "Sintomas e Comorbidades",
    "Temporalidade",
    "PrevisÃ£o de Casos"
])

with tab1:
    st.header("VisÃ£o Geral dos Casos")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # GrÃ¡fico 1: DistribuiÃ§Ã£o de casos
        fig1 = px.pie(
            df_filtrado,
            names='classificacaoFinal',
            title='DistribuiÃ§Ã£o de Casos por ClassificaÃ§Ã£o'
        )
        st.plotly_chart(fig1, use_container_width=True)
        
    with col2:
        # GrÃ¡fico 2: EvoluÃ§Ã£o dos casos
        fig2 = px.histogram(
            df_filtrado,
            x='evolucaoCaso',
            color='classificacaoFinal',
            barmode='group',
            title='EvoluÃ§Ã£o dos Casos por ClassificaÃ§Ã£o'
        )
        st.plotly_chart(fig2, use_container_width=True)
    
    # GrÃ¡fico 3: DistribuiÃ§Ã£o por idade
    st.subheader("DistribuiÃ§Ã£o por Idade")
    fig3 = px.histogram(
        df_filtrado,
        x='idade',
        nbins=20,
        color='classificacaoFinal',
        title='DistribuiÃ§Ã£o de Casos por Idade'
    )
    st.plotly_chart(fig3, use_container_width=True)

with tab2:
    st.header("AnÃ¡lise DemogrÃ¡fica")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # GrÃ¡fico 4: DistribuiÃ§Ã£o por sexo
        sexo_counts = df_filtrado[[
            'sexo_Feminino', 
            'sexo_Masculino', 
            'sexo_Indefinido'
        ]].sum().reset_index()
        sexo_counts.columns = ['Sexo', 'Contagem']
        sexo_counts['Sexo'] = sexo_counts['Sexo'].str.replace('sexo_', '')
        
        fig4 = px.pie(
            sexo_counts,
            values='Contagem',
            names='Sexo',
            title='DistribuiÃ§Ã£o por Sexo'
        )
        st.plotly_chart(fig4, use_container_width=True)
    
    with col2:
        # GrÃ¡fico 5: Profissionais de saÃºde
        prof_counts = df_filtrado[[
            'profissionalSaude_Sim', 
            'profissionalSaude_NÃ£o'
        ]].sum().reset_index()
        prof_counts.columns = ['Categoria', 'Contagem']
        prof_counts['Categoria'] = prof_counts['Categoria'].str.replace('profissionalSaude_', '')
        
        fig5 = px.bar(
            prof_counts,
            x='Categoria',
            y='Contagem',
            title='Profissionais de SaÃºde Afetados'
        )
        st.plotly_chart(fig5, use_container_width=True)
    
    # GrÃ¡fico 6: VacinaÃ§Ã£o
    st.subheader("Status de VacinaÃ§Ã£o")
    df_filtrado['status_vacinacao'] = 'NÃ£o informado'
    df_filtrado.loc[df_filtrado['codigoRecebeuVacina_Sim'] == 1, 'status_vacinacao'] = 'Sim'
    df_filtrado.loc[df_filtrado['codigoRecebeuVacina_NÃ£o'] == 1, 'status_vacinacao'] = 'NÃ£o'
    df_filtrado.loc[df_filtrado['codigoRecebeuVacina_Ignorado'] == 1, 'status_vacinacao'] = 'Ignorado'

    fig6 = px.histogram(
        df_filtrado,
        x='status_vacinacao',
        color='classificacaoFinal',
        barmode='group',
        title='DistribuiÃ§Ã£o por Status de VacinaÃ§Ã£o',
        category_orders={"status_vacinacao": ["Sim", "NÃ£o", "Ignorado", "NÃ£o informado"]}
    )
    st.plotly_chart(fig6, use_container_width=True)

with tab3:
    st.header("Sintomas e CondiÃ§Ãµes PrÃ©-existentes")
    
    # Lista de sintomas
    sintomas = [
        'Dor de Garganta', 'Coriza', 'Dispneia', 'DistÃºrbios Olfativos',
        'DistÃºrbios Gustativos', 'Febre', 'Tosse', 'Dor de CabeÃ§a'
    ]
    
    # GrÃ¡fico 7: FrequÃªncia de sintomas
    st.subheader("FrequÃªncia de Sintomas")
    sintoma_counts = df_filtrado[sintomas].sum().reset_index()
    sintoma_counts.columns = ['Sintoma', 'Contagem']
    
    fig7 = px.bar(
        sintoma_counts,
        x='Contagem',
        y='Sintoma',
        orientation='h',
        title='Sintomas Mais Comuns'
    )
    st.plotly_chart(fig7, use_container_width=True)
    
    # GrÃ¡fico 8: CondiÃ§Ãµes prÃ©-existentes
    st.subheader("CondiÃ§Ãµes PrÃ©-existentes")
    
    # Extrair condiÃ§Ãµes (assumindo que a coluna 'condicoes' contÃ©m strings como "['Diabetes', 'Gestante']")
    df_filtrado['condicoes'] = df_filtrado['condicoes'].str.strip("[]").str.replace("'", "")
    df_condicoes = df_filtrado['condicoes'].str.get_dummies(sep=', ')
    
    if not df_condicoes.empty:
        condicao_counts = df_condicoes.sum().sort_values(ascending=False).reset_index()
        condicao_counts.columns = ['CondiÃ§Ã£o', 'Contagem']
        
        fig8 = px.bar(
            condicao_counts,
            x='Contagem',
            y='CondiÃ§Ã£o',
            orientation='h',
            title='CondiÃ§Ãµes PrÃ©-existentes Mais Comuns'
        )
        st.plotly_chart(fig8, use_container_width=True)
    else:
        st.warning("NÃ£o hÃ¡ dados suficientes sobre condiÃ§Ãµes prÃ©-existentes.")

with tab4:
    st.header("AnÃ¡lise Temporal")
    
    # GrÃ¡fico 9: Casos ao longo do tempo
    st.subheader("Casos por Data de NotificaÃ§Ã£o")
    
    if not df_filtrado['dataNotificacao'].isnull().all():
        df_temporal = df_filtrado.groupby(
            df_filtrado['dataNotificacao'].dt.to_period('M')
        ).size().reset_index(name='Contagem')
        df_temporal['dataNotificacao'] = df_temporal['dataNotificacao'].dt.to_timestamp()
        
        fig9 = px.line(
            df_temporal,
            x='dataNotificacao',
            y='Contagem',
            title='Casos por MÃªs de NotificaÃ§Ã£o'
        )
        st.plotly_chart(fig9, use_container_width=True)
    else:
        st.warning("Dados de data de notificaÃ§Ã£o ausentes ou invÃ¡lidos.")
    
    # GrÃ¡fico 10: Tempo entre sintomas e notificaÃ§Ã£o
    st.subheader("Tempo entre Sintomas e NotificaÃ§Ã£o")
    
    if 'dias_entre_sintomas_notificacao' in df_filtrado.columns:
        fig10 = px.box(
            df_filtrado,
            x='classificacaoFinal',
            y='dias_entre_sintomas_notificacao',
            color='evolucaoCaso',
            title='Tempo entre InÃ­cio dos Sintomas e NotificaÃ§Ã£o'
        )
        st.plotly_chart(fig10, use_container_width=True)
    else:
        st.warning("Dados sobre tempo entre sintomas e notificaÃ§Ã£o nÃ£o disponÃ­veis.")
with tab5:
    st.header("PrevisÃ£o de Casos de COVID-19")
    st.markdown("Informe os dados do paciente para realizar a previsÃ£o")

    with st.form("prediction_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            # Dados demogrÃ¡ficos
            idade = st.number_input("Idade", min_value=0, max_value=120, value=30)
            sexo = st.radio("Sexo", ['Masculino', 'Feminino', 'Indefinido'])
            profissional_saude = st.radio("Profissional de SaÃºde?", ['Sim', 'NÃ£o'])
            vacinado = st.radio("Recebeu vacina?", ['Sim', 'NÃ£o', 'Ignorado'])
            total_condicoes = st.number_input("NÃºmero de condiÃ§Ãµes prÃ©-existentes", min_value=0, max_value=10, value=0)
            
        with col2:
            # Sintomas
            dias_sintomas_notificacao = st.number_input("Dias entre sintomas e notificaÃ§Ã£o", min_value=0, max_value=30, value=3)
            febre = st.checkbox("Febre")
            tosse = st.checkbox("Tosse")
            dor_garganta = st.checkbox("Dor de Garganta")
            dispneia = st.checkbox("Dificuldade RespiratÃ³ria (Dispneia)")
            disturbios_olfativos = st.checkbox("DistÃºrbios Olfativos")
            disturbios_gustativos = st.checkbox("DistÃºrbios Gustativos")
            dor_cabeca = st.checkbox("Dor de CabeÃ§a")
            coriza = st.checkbox("Coriza")
            outros = st.checkbox("Outros Sintomas")
            assintomatico = st.checkbox("AssintomÃ¡tico")

        submitted = st.form_submit_button("Realizar PrevisÃ£o")

    if submitted:
        try:
            # Carregar modelo e scaler
            model = joblib.load('melhor_modelo.pkl')
            scaler = joblib.load('scaler.pkl')
            
            # Criar array de features na mesma ordem usada no treino
            features = [
                idade,
                1 if profissional_saude == 'NÃ£o' else 0,
                1 if profissional_saude == 'Sim' else 0,
                1 if sexo == 'Feminino' else 0,
                1 if sexo == 'Indefinido' else 0,
                1 if sexo == 'Masculino' else 0,
                1 if vacinado == 'Ignorado' else 0,
                1 if vacinado == 'NÃ£o' else 0,
                1 if vacinado == 'Sim' else 0,
                total_condicoes,
                dias_sintomas_notificacao,
                dor_garganta,
                coriza,
                outros,
                dispneia,
                disturbios_olfativos,
                assintomatico,
                disturbios_gustativos,
                febre,
                tosse,
                dor_cabeca
            ]
            
            # Aplicar scaler
            features_scaled = scaler.transform([features])
            
            # Fazer previsÃ£o
            prediction = model.predict(features_scaled)
            proba = model.predict_proba(features_scaled)
            
            # Exibir resultados
            st.subheader("Resultado da PrevisÃ£o:")
            classe_predita = prediction[0]
            confianca = np.max(proba[0]) * 100
            
            if classe_predita == 'Confirmado':
                st.error(f"**Resultado:** {classe_predita} (ConfianÃ§a: {confianca:.1f}%)")
            else:
                st.success(f"**Resultado:** {classe_predita} (ConfianÃ§a: {confianca:.1f}%)")
            
            # ExplicaÃ§Ã£o da previsÃ£o
            st.markdown("### Fatores mais relevantes para a decisÃ£o:")
            importances = model.feature_importances_
            feature_names = [
                'Idade', 'Profissional SaÃºde NÃ£o', 'Profissional SaÃºde Sim', 
                'Sexo Feminino', 'Sexo Indefinido', 'Sexo Masculino', 
                'Vacina Ignorado', 'Vacina NÃ£o', 'Vacina Sim', 'Total CondiÃ§Ãµes',
                'Dias Sintomas/NotificaÃ§Ã£o', 'Dor Garganta', 'Coriza', 'Outros',
                'Dispneia', 'DistÃºrbios Olfativos', 'AssintomÃ¡tico', 
                'DistÃºrbios Gustativos', 'Febre', 'Tosse', 'Dor CabeÃ§a'
            ]
            
            # Ordenar importÃ¢ncias
            indices = np.argsort(importances)[::-1][:5]  # Top 5 features
            st.write("Principais fatores que influenciaram a previsÃ£o:")
            for i in indices:
                st.write(f"- {feature_names[i]} ({importances[i]*100:.1f}%)")
                
        except Exception as e:
            st.error(f"Erro na previsÃ£o: {str(e)}")
# RodapÃ©
st.markdown("---")
st.markdown("Dashboard desenvolvido para anÃ¡lise de dados de COVID-19 e sÃ­ndromes gripais")